/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package conv;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;

import org.junit.jupiter.api.BeforeEach;

class ConverterTest {
    private Converter converter;

    @BeforeEach
    public void doBefore() {
        converter = new Converter();
    }

    @Test
    void testAdd() {
        assertEquals(5, converter.add(2, 3));
        assertEquals(0, converter.add(0, 0));
        assertEquals(0, converter.add(-1, 1));
        assertEquals(0, converter.add(1, -1));
    }

    @Test
    void testAddPositive() {
        assertEquals(5, converter.addPositive(2, 3, 0));
        assertEquals(0, converter.addPositive(0, 0, 0));
        assertEquals(1, converter.addPositive(-1, 1, 0));
        assertEquals(1, converter.addPositive(1, -1, 0));
        assertEquals(6, converter.addPositive(1, 2, 3));

        assertEquals(3, converter.addPositive(-1, -2, 3));
        assertEquals(1, converter.addPositive(1, -2, -3));
        assertEquals(2, converter.addPositive(-1, 2, -3));
    }

    @Test
    void testAddList() {
        assertEquals(5, converter.addList(Arrays.asList( 2, 3 )));
        assertEquals(0, converter.addList(Arrays.asList( 0, 0 )));
        assertEquals(0, converter.addList(Arrays.asList( -1, 1 )));
        assertEquals(0, converter.addList(Arrays.asList( 1, -1 )));
        assertEquals(15, converter.addList(Arrays.asList( 1, 2, 3, 4, 5 )));
        assertEquals(0, converter.addList(Arrays.asList()));
        assertEquals(-5, converter.addList(Arrays.asList( -2, -3 )));
    }

    @Test
    void testGetStringLength() {
        assertEquals(0, converter.getStringLength(""));
        assertEquals(1, converter.getStringLength("a"));
        assertEquals(2, converter.getStringLength("ab"));
        assertEquals(3, converter.getStringLength("abc"));
        assertEquals(4, converter.getStringLength("abcd"));
        assertEquals(5, converter.getStringLength("abcde"));
    }

    @Test
    void testSign() {
        assertEquals("positive", converter.sign(1));
        assertEquals("negative", converter.sign(-1));
        assertEquals("zero", converter.sign(0));
    }

    @Test
    void testCountHellos() {
        assertEquals(0, converter.countHellos(Arrays.asList()));
        assertEquals(0, converter.countHellos(Arrays.asList("hi")));
        assertEquals(0, converter.countHellos(Arrays.asList("hi", "random other string", "nope")));
        assertEquals(1, converter.countHellos(Arrays.asList("hello")));
        assertEquals(1, converter.countHellos(Arrays.asList("hello", "hi")));
        assertEquals(2, converter.countHellos(Arrays.asList("hello", "hi", "hello")));
        assertEquals(3, converter.countHellos(Arrays.asList("hello", "hi", "hello", "hello")));
    }

    @Test
    void testInvert() {
        assertTrue(converter.invert(false));
        assertFalse(converter.invert(true));
    }

    @Test
    void testIsEven() {
        assertTrue(converter.isEven(0));
        assertTrue(converter.isEven(2));
        assertTrue(converter.isEven(4));
        assertTrue(converter.isEven(6));
        assertTrue(converter.isEven(8));
        assertTrue(converter.isEven(10));
        assertTrue(converter.isEven(23894));
        assertFalse(converter.isEven(1));
        assertFalse(converter.isEven(3));
        assertFalse(converter.isEven(5));
        assertFalse(converter.isEven(7));
        assertFalse(converter.isEven(9));
        assertFalse(converter.isEven(9548953));
    }

    @Test
    void testAddListWhile() {
        assertEquals(5, converter.addListWhile(Arrays.asList( 2, 3 )));
        assertEquals(0, converter.addListWhile(Arrays.asList( 0, 0 )));
        assertEquals(0, converter.addListWhile(Arrays.asList( -1, 1 )));
        assertEquals(0, converter.addListWhile(Arrays.asList( 1, -1 )));
        assertEquals(15, converter.addListWhile(Arrays.asList( 1, 2, 3, 4, 5 )));
        assertEquals(0, converter.addListWhile(Arrays.asList()));
        assertEquals(-5, converter.addListWhile(Arrays.asList( -2, -3 )));
    }

    @Test
    void testAddPositiveList() {
        assertEquals(5, converter.addPositiveList(Arrays.asList( 2, 3 )));
        assertEquals(0, converter.addPositiveList(Arrays.asList( 0, 0 )));
        assertEquals(1, converter.addPositiveList(Arrays.asList( -1, 1 )));
        assertEquals(1, converter.addPositiveList(Arrays.asList( 1, -1 )));
        assertEquals(15, converter.addPositiveList(Arrays.asList( 1, 2, 3, 4, 5 )));
        assertEquals(0, converter.addPositiveList(Arrays.asList()));
        assertEquals(0, converter.addPositiveList(Arrays.asList( -2, -3 )));
    }
}